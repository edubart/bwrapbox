##[[
cinclude '<string.h>'
cinclude '<time.h>'
cinclude '<errno.h>'
cinclude '<signal.h>'
cinclude '<fcntl.h>'
cinclude '<unistd.h>'
cinclude '<sys/prctl.h>'
cinclude '<sys/resource.h>'
cinclude '<sys/stat.h>'
cinclude '<sys/wait.h>'
]]

global function atexit(func: function(): void): cint <cimport,nodecl> end

-- unistd
global function getpid(): cint <cimport,nodecl> end
global function getuid(): cuint <cimport,nodecl> end
global function getgid(): cuint <cimport,nodecl> end
global function setuid(uid: cuint): cint <cimport,nodecl> end
global function setgid(gid: cuint): cint <cimport,nodecl> end
global function fork(): cint <cimport,nodecl> end
global function kill(pid: cint, sig: cint): cint <cimport,nodecl> end
global function execvp(file: cstring,argv: *[0]cstring): cint <cimport,nodecl> end
global function _exit(status: cint): cint <cimport,nodecl> end
global function exit(status: cint): cint <cimport,nodecl> end
global function rmdir(path: cstring): cint <cimport,nodecl> end
global function close(fd: cint): cint <cimport,nodecl> end
global function read(fd: cint, buf: pointer, n: csize): clong <cimport,nodecl> end
global function write(fd: cint, buf: pointer, n: csize): clong <cimport,nodecl> end

-- wait
global function waitpid(pid: cint, stat_loc: *cint, options: cint): cint <cimport,nodecl> end
global function WIFEXITED(status: cint): boolean <cimport,nodecl> end
global function WIFSIGNALED(status: cint): boolean <cimport,nodecl> end
global function WIFSTOPPED(status: cint): boolean <cimport,nodecl> end
global function WEXITSTATUS(status: cint): cint <cimport,nodecl> end
global function WTERMSIG(status: cint): cint <cimport,nodecl> end
global function WSTOPSIG(status: cint): cint <cimport,nodecl> end

-- signal
global sigset_t: type <cimport,nodecl,cincomplete> = @record{}
global siginfo_t: type <cimport,nodecl,cincomplete> = @record{
  si_signo: cint,
  si_errno: cint,
  si_code: cint,
}
global sigaction_t: type <cimport,nodecl,cincomplete,ctypedef'sigaction'> = @record{
  sa_handler: function(cint),
  sa_sigaction: function(cint,*siginfo_t,pointer),
  sa_mask: sigset_t,
  sa_flags: cint,
  sa_restorer: function()
}
global SIG_DFL: function(cint) <cimport,nodecl>
global SIGKILL: cint <cimport,nodecl,const>
global SIGTERM: cint <cimport,nodecl,const>
global SIGINT: cint <cimport,nodecl,const>
global SIGXCPU: cint <cimport,nodecl,const>
global function sigaction(sig: cint, act: *sigaction_t, oact: *sigaction_t): cint <cimport,nodecl> end

-- resource
global rlimit_t: type <cimport,nodecl,ctypedef'rlimit'> = @record{
  rlim_cur: culong,
  rlim_max: culong,
}
global function getrlimit(resource: cint, rlim: *rlimit_t): cint <cimport,nodecl> end
global function setrlimit(resource: cint, rlim: *rlimit_t): cint <cimport,nodecl> end

-- time
global timespec_t: type <cimport,nodecl,ctypedef'timespec'> = @record{
  tv_sec: ctime_t,
  tv_nsec: clong
}
global function nanosleep(requested_time: *timespec_t, remaining: *timespec_t): cint <cimport,nodecl> end

-- prctl
global function prctl(option: cint, arg2: culong, arg3: culong, arg4: culong, arg5: culong): cint <cimport,nodecl> end
global PR_SET_PDEATHSIG: cint <cimport,nodecl,const>

-- stat
global stat_t: type <cimport,nodecl,cincomplete,ctypedef'stat'> = @record{
  st_dev: culong,
  st_ino: culong,
  st_nlink: culong,
  st_mode: cuint,
  st_uid: cuint,
  st_gid: cuint,
  st_rdev: culong,
  st_size: clong,
  st_blksize: clong,
  st_blocks: clong,
  st_atime: int64,
  st_mtime: int64,
  st_ctime: int64,
}
global S_IRUSR: cuint <cimport,nodecl,const>
global S_IWUSR: cuint <cimport,nodecl,const>
global S_IXUSR: cuint <cimport,nodecl,const>
global S_IRGRP: cuint <cimport,nodecl,const>
global S_IWGRP: cuint <cimport,nodecl,const>
global S_IXGRP: cuint <cimport,nodecl,const>
global S_IROTH: cuint <cimport,nodecl,const>
global S_IWOTH: cuint <cimport,nodecl,const>
global S_IXOTH: cuint <cimport,nodecl,const>
global function S_ISREG(mode: cuint): boolean <cimport,nodecl> end
global function S_ISDIR(mode: cuint): boolean <cimport,nodecl> end
global function S_ISCHR(mode: cuint): boolean <cimport,nodecl> end
global function S_ISLNK(mode: cuint): boolean <cimport,nodecl> end
global function S_ISFIFO(mode: cuint): boolean <cimport,nodecl> end
global function S_ISSOCK(mode: cuint): boolean <cimport,nodecl> end
global function S_ISBLK(mode: cuint): boolean <cimport,nodecl> end
global function stat(file: cstring, buf: *stat_t): cint <cimport,nodecl> end
global function fstat(fd: cint, buf: *stat_t): cint <cimport,nodecl> end
global function lstat(file: cstring, buf: *stat_t): cint <cimport,nodecl> end
global function chmod(file: cstring, mode: cuint): cint <cimport,nodecl> end
global function mkdir(path: cstring, mode: cuint): cint <cimport,nodecl> end

-- errno
global errno: cint <cimport,nodecl>
global function strerror(errnum: cint): cstring <cimport,nodecl> end

-- fcntl
global O_RDONLY: cint <cimport,nodecl,const>
global O_WRONLY: cint <cimport,nodecl,const>
global O_CREAT: cint <cimport,nodecl,const>
global O_TRUNC: cint <cimport,nodecl,const>
global function open(file: cstring, oflag: cint, mode: cuint): cint <cimport,nodecl> end
